# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auvsi16/ImageProcessing.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ImageProcessing(genpy.Message):
  _md5sum = "1ff3d57280d166d6d98513c0249ee9a4"
  _type = "auvsi16/ImageProcessing"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 buoy_number
int32 center_buoy_x
int32 center_buoy_y
int32 buoy_area
int32 radius_buoy
bool detection_status

"""
  __slots__ = ['buoy_number','center_buoy_x','center_buoy_y','buoy_area','radius_buoy','detection_status']
  _slot_types = ['int32','int32','int32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       buoy_number,center_buoy_x,center_buoy_y,buoy_area,radius_buoy,detection_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImageProcessing, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.buoy_number is None:
        self.buoy_number = 0
      if self.center_buoy_x is None:
        self.center_buoy_x = 0
      if self.center_buoy_y is None:
        self.center_buoy_y = 0
      if self.buoy_area is None:
        self.buoy_area = 0
      if self.radius_buoy is None:
        self.radius_buoy = 0
      if self.detection_status is None:
        self.detection_status = False
    else:
      self.buoy_number = 0
      self.center_buoy_x = 0
      self.center_buoy_y = 0
      self.buoy_area = 0
      self.radius_buoy = 0
      self.detection_status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5iB.pack(_x.buoy_number, _x.center_buoy_x, _x.center_buoy_y, _x.buoy_area, _x.radius_buoy, _x.detection_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.buoy_number, _x.center_buoy_x, _x.center_buoy_y, _x.buoy_area, _x.radius_buoy, _x.detection_status,) = _struct_5iB.unpack(str[start:end])
      self.detection_status = bool(self.detection_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5iB.pack(_x.buoy_number, _x.center_buoy_x, _x.center_buoy_y, _x.buoy_area, _x.radius_buoy, _x.detection_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.buoy_number, _x.center_buoy_x, _x.center_buoy_y, _x.buoy_area, _x.radius_buoy, _x.detection_status,) = _struct_5iB.unpack(str[start:end])
      self.detection_status = bool(self.detection_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5iB = struct.Struct("<5iB")
