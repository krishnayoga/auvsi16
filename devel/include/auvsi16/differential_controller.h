// Generated by gencpp from file auvsi16/differential_controller.msg
// DO NOT EDIT!


#ifndef AUVSI16_MESSAGE_DIFFERENTIAL_CONTROLLER_H
#define AUVSI16_MESSAGE_DIFFERENTIAL_CONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auvsi16
{
template <class ContainerAllocator>
struct differential_controller_
{
  typedef differential_controller_<ContainerAllocator> Type;

  differential_controller_()
    : left_pwm(0)
    , right_pwm(0)
    , override_apm(false)  {
    }
  differential_controller_(const ContainerAllocator& _alloc)
    : left_pwm(0)
    , right_pwm(0)
    , override_apm(false)  {
    }



   typedef int16_t _left_pwm_type;
  _left_pwm_type left_pwm;

   typedef int16_t _right_pwm_type;
  _right_pwm_type right_pwm;

   typedef uint8_t _override_apm_type;
  _override_apm_type override_apm;




  typedef boost::shared_ptr< ::auvsi16::differential_controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auvsi16::differential_controller_<ContainerAllocator> const> ConstPtr;

}; // struct differential_controller_

typedef ::auvsi16::differential_controller_<std::allocator<void> > differential_controller;

typedef boost::shared_ptr< ::auvsi16::differential_controller > differential_controllerPtr;
typedef boost::shared_ptr< ::auvsi16::differential_controller const> differential_controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auvsi16::differential_controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auvsi16::differential_controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auvsi16

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/indigo/share/mavros_msgs/cmake/../msg'], 'auvsi16': ['/home/aldwinakbar/Dropbox/Projects/campus/team/TRUI/amvui2015/AI/src/auvsi16/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auvsi16::differential_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auvsi16::differential_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auvsi16::differential_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auvsi16::differential_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auvsi16::differential_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auvsi16::differential_controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auvsi16::differential_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "365461bcf44bdfbb44bee48829b6d0e9";
  }

  static const char* value(const ::auvsi16::differential_controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x365461bcf44bdfbbULL;
  static const uint64_t static_value2 = 0x44bee48829b6d0e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::auvsi16::differential_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auvsi16/differential_controller";
  }

  static const char* value(const ::auvsi16::differential_controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auvsi16::differential_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 left_pwm\n\
int16 right_pwm\n\
bool override_apm\n\
";
  }

  static const char* value(const ::auvsi16::differential_controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auvsi16::differential_controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_pwm);
      stream.next(m.right_pwm);
      stream.next(m.override_apm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct differential_controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auvsi16::differential_controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auvsi16::differential_controller_<ContainerAllocator>& v)
  {
    s << indent << "left_pwm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_pwm);
    s << indent << "right_pwm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_pwm);
    s << indent << "override_apm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override_apm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUVSI16_MESSAGE_DIFFERENTIAL_CONTROLLER_H
