// Generated by gencpp from file auvsi16/HSVValue.msg
// DO NOT EDIT!


#ifndef AUVSI16_MESSAGE_HSVVALUE_H
#define AUVSI16_MESSAGE_HSVVALUE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auvsi16
{
template <class ContainerAllocator>
struct HSVValue_
{
  typedef HSVValue_<ContainerAllocator> Type;

  HSVValue_()
    : iLowH(0)
    , iHighH(0)
    , iLowS(0)
    , iHighS(0)
    , iLowV(0)
    , iHighV(0)  {
    }
  HSVValue_(const ContainerAllocator& _alloc)
    : iLowH(0)
    , iHighH(0)
    , iLowS(0)
    , iHighS(0)
    , iLowV(0)
    , iHighV(0)  {
    }



   typedef int32_t _iLowH_type;
  _iLowH_type iLowH;

   typedef int32_t _iHighH_type;
  _iHighH_type iHighH;

   typedef int32_t _iLowS_type;
  _iLowS_type iLowS;

   typedef int32_t _iHighS_type;
  _iHighS_type iHighS;

   typedef int32_t _iLowV_type;
  _iLowV_type iLowV;

   typedef int32_t _iHighV_type;
  _iHighV_type iHighV;




  typedef boost::shared_ptr< ::auvsi16::HSVValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auvsi16::HSVValue_<ContainerAllocator> const> ConstPtr;

}; // struct HSVValue_

typedef ::auvsi16::HSVValue_<std::allocator<void> > HSVValue;

typedef boost::shared_ptr< ::auvsi16::HSVValue > HSVValuePtr;
typedef boost::shared_ptr< ::auvsi16::HSVValue const> HSVValueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auvsi16::HSVValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auvsi16::HSVValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auvsi16

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/indigo/share/mavros_msgs/cmake/../msg'], 'auvsi16': ['/home/aldwinakbar/Dropbox/Projects/campus/team/TRUI/amvui2015/AI/src/auvsi16/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auvsi16::HSVValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auvsi16::HSVValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auvsi16::HSVValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auvsi16::HSVValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auvsi16::HSVValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auvsi16::HSVValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auvsi16::HSVValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19ceef5ba7ddd7e83c3e574d372bbffc";
  }

  static const char* value(const ::auvsi16::HSVValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19ceef5ba7ddd7e8ULL;
  static const uint64_t static_value2 = 0x3c3e574d372bbffcULL;
};

template<class ContainerAllocator>
struct DataType< ::auvsi16::HSVValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auvsi16/HSVValue";
  }

  static const char* value(const ::auvsi16::HSVValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auvsi16::HSVValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 iLowH\n\
int32 iHighH\n\
int32 iLowS\n\
int32 iHighS\n\
int32 iLowV\n\
int32 iHighV\n\
";
  }

  static const char* value(const ::auvsi16::HSVValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auvsi16::HSVValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iLowH);
      stream.next(m.iHighH);
      stream.next(m.iLowS);
      stream.next(m.iHighS);
      stream.next(m.iLowV);
      stream.next(m.iHighV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HSVValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auvsi16::HSVValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auvsi16::HSVValue_<ContainerAllocator>& v)
  {
    s << indent << "iLowH: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iLowH);
    s << indent << "iHighH: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iHighH);
    s << indent << "iLowS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iLowS);
    s << indent << "iHighS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iHighS);
    s << indent << "iLowV: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iLowV);
    s << indent << "iHighV: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iHighV);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUVSI16_MESSAGE_HSVVALUE_H
